---
import { readOne, readAll } from "../../lib/markdoc/read";
import { blog } from "../../lib/markdoc/frontmatter.schema";
import Renderer from "../../components/Renderer.astro";
import BlogPostMeta from "../../components/BlogPostMeta.astro";
import ContentLayout from "../../layouts/ContentLayout.astro";
import { SITE_URL } from "../../config";
import { getCollection, type CollectionEntry } from "astro:content";

// export async function getStaticPaths() {
//   const posts = await readAll({
//     directory: "blog",
//     frontmatterSchema: blog,
//   });

//   // we don't want to generate pages for posts that link to external websites
//   const filteredPosts = posts
//     .filter((p) => p.frontmatter.draft !== true)
//     .filter(({ frontmatter }) => !frontmatter.external);

//   return filteredPosts.map((post) => {
//     return { params: { slug: post.slug } };
//   });
// }

const { slug } = Astro.params;
if (typeof slug !== "string") {
  throw Error(`slug should be string. Received: ${slug}`);
}

// const { content, frontmatter } = await readOne({
//   directory: "blog",
//   slug,
//   frontmatterSchema: blog,
// });

export async function getStaticPaths() {
	const posts = await getCollection('blog');
	return posts.map((post: any) => ({
		params: { slug: post.slug },
		props: post,
	}));
}
type Props = CollectionEntry<'blog'>;

const post = Astro.props;
const { Content } = await post.render();

const ogImageAbsoluteUrl =
  post.data.external !== true && post.data.ogImagePath
    ? new URL(post.data.ogImagePath, SITE_URL).toString()
    : undefined;

---

<ContentLayout title={post.data.title} date={post.data.date}>
  <BlogPostMeta
    title={post.data.title}
    description={post.data.external ? undefined : post.data.description}
    publishDate={post.data.date.toISOString()}
    pagePath={`/blog/${slug}`}
    ogImageAbsoluteUrl={ogImageAbsoluteUrl}
    slot="meta"
  />
  <!-- <Renderer content={content} slot="content" /> -->
  <!-- <Renderer content={Content} slot="content" /> -->
  <Content slot="content" />
</ContentLayout>
